/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next) {
 *          this->data = data;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

//already nos are reverese and we have to return reversed num
void insertAtTail(Node* &head,Node* &tail,int val)
{
    Node* temp=new Node(val);
    if(head==NULL)
    {
        head=temp;
        tail=head;
        return;
    }
    else
    {
        tail->next=temp;
        tail=temp;
    }
}
Node *addTwoNumbers(Node *num1, Node *num2)
{
    if(num1==NULL)
        return num2;
    if(num2==NULL)
        return num1;
    Node* ansHead=NULL;
    Node* ansTail=NULL;

    int carry=0;
    while(num1 != NULL || num2 != NULL || carry !=0)
    {
        int val1=0;
        if(num1 != NULL)
            val1=num1->data;
        
        int val2=0;
        if(num2!=NULL)
            val2=num2->data;

        int sum= val1+val2+carry;
        int digit=sum%10;

        insertAtTail(ansHead, ansTail, digit);

        carry=sum/10;

        if(num1!=NULL)
            num1=num1->next;
        if(num2!=NULL)
            num2=num2->next;

    }
    return ansHead;
}
